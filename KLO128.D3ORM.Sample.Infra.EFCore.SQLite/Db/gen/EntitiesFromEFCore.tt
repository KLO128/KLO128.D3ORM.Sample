<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ Assembly Name="EnvDTE.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="EnvDTE" #>
<#@ output extension=".txt" #>

<#
	var targetPath = Host.ResolvePath("../../../KLO128.D3ORM.Sample.Domain/Models/Entities/");
    PropIdFormat = "{0}Id";
    DefaultNameSpace = "KLO128.D3ORM.Sample.Domain.Models.Entities";
    DatabaseContextNames = new string [] {"sample_databaseContext"};
    DefaultPropValues = new Dictionary<string, string> { { "LastChange", "DateTime.UtcNow" } };
    var entitiesJsonPath = Host.ResolvePath("EntitiesFromEFCore.tt").Replace(".tt", ".json");

	var dte = (EnvDTE.DTE)((IServiceProvider)Host).GetService(typeof(EnvDTE.DTE));
	var project = dte.Solution.FindProjectItem(Host.TemplateFile).ContainingProject;
	var codeElements = CodeElementsInProjectItems(project.ProjectItems);
    var messages = new List<string>();

    string? entitiesJson = null;

    if (File.Exists(entitiesJsonPath))
    {
        entitiesJson = File.ReadAllText(entitiesJsonPath);
    }
    else
    {
        messages.Add($"EntitiesFromEFCore.json not found => all navigation properties has been persisted! Please place it in the same directory as this template or specify {nameof(entitiesJsonPath)}!");
        messages.Add(string.Empty);
    }

    var codes = BuildFileTexts(codeElements, entitiesJson, messages);

	foreach (var item in codes)
	{
		SaveOutput(string.Concat(targetPath, item.Key, ".cs"), item.Value.ToString());
	}

    foreach (var msg in messages)
    {
        WriteLine(msg);
    }

    if (genSuccess)
    {
        WriteLine("//Entities generated successfully!");
    }
    else
    {
        WriteLine("//No Entity was generated... Uncomment: SaveOutput()");
    }
#>

<#+
public string DefaultNameSpace {get; set;}
private string PropIdFormat { get; set; }
public string[] DatabaseContextNames { get; set; }
public Dictionary<string, string> DefaultPropValues { get; set; }
public static string[] extraNameSpaces = new string[0];
public static bool genSuccess = false;


private string classStartFormat = @"
///
/// generated file
///

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace {0}
{{
    public class {1}
    {{
";

private string classEnd = @"
    }
}";

private string propertyFormat = @"
        {3}
        public {0} {1} {{ get; set; }}{2}";

private string lazyPropertyFormat = @"
        private {0}? {1};
        public {0} {2}
        {{
            get
            {{
                if ({1} == null)
                {{
                    {1} = {3};
                }}

                return {1};
            }}
            set
            {{
                {1} = value;
            }}
        }}
";

private Dictionary<string, StringBuilder> BuildFileTexts(IEnumerable<CodeElement> elements, string? entitiesJson, List<string> messages)
{
    var ret = new Dictionary<string, StringBuilder>();
    var namesForEntities = new List<string>();

    foreach (var element in elements)
    {
        if (GetElementKind(element) != "class" || !element.FullName.Contains(".Db.") || DatabaseContextNames.Contains(element.Name))
        {
            continue;
        }

        namesForEntities.Add(element.Name);
    }

    messages.Add(string.Join("\r\n", namesForEntities));

    messages.Add("Props:");

    var allProps = new Dictionary<string, Dictionary<string, string>>();

    foreach (var element in elements)
    {
        var elementKind = GetElementKind(element);

        if (elementKind == null)
        {
            continue;
        }

        var elementName = element.Name;

        if (!namesForEntities.Contains(elementName))
        {
            continue;
        }

        StringBuilder sb;
        Dictionary<string, string> props;

        if (allProps.ContainsKey(elementName))
        {
            props = allProps[elementName];
        }
        else
        {
            props = new Dictionary<string, string>();
            allProps.Add(elementName, props);
        }

        if (ret.ContainsKey(elementName))
        {
            sb = ret[elementName];
        }
        else
        {
            sb = new StringBuilder();
            
            sb.AppendFormat(classStartFormat, DefaultNameSpace, elementName);
            ret.Add(elementName, sb);
        }

        foreach (CodeElement child in element.Children)
        {
        var msg = $"step in:> {element.Name}.{child.Name}";

            if (child.Kind != vsCMElement.vsCMElementProperty)
            {
                continue;
            }

            var start = child.GetStartPoint();
            var finish= child.GetEndPoint();
            var required = start.CreateEditPoint().GetText(finish).Contains("= null!");

            var elProp = (child as CodeProperty);
            var prop = new KeyValuePair<string, string>(child.Name, GetTypeName(elProp.Type.AsString, namesForEntities));

            if (props.ContainsKey(prop.Key) || !IsPropertyIncluded(elementName, elProp, entitiesJson, namesForEntities))
            {
        msg += " -> skipped... prop contained == " + props.ContainsKey(prop.Key);
        messages.Add(msg);
                continue;
            }

            if (!required && !prop.Value.Contains('?') && !prop.Value.StartsWith("ICollection") && elProp.Type.CodeType.Kind == vsCMElement.vsCMElementClass)
            {
                prop = new KeyValuePair<string, string>(prop.Key, prop.Value + '?');
            }

            props.Add(prop.Key, prop.Value);

            var enumerator = elProp.Attributes.GetEnumerator();

            foreach (CodeElement attr in elProp.Attributes)
            {
                if (attr.Name == "JsonIgnore" || attr.Name == "JsonIgnoreAttribute")
                {
                    sb.AppendLine().AppendLine("        [Newtonsoft.Json.JsonIgnore]");
                    sb.AppendLine().Append("        [System.Text.Json.Serialization.JsonIgnore]");
                }
            }

            if (prop.Value.StartsWith("ICollection"))
            {
           msg += " -> As Collection";
                sb.AppendFormat(lazyPropertyFormat, prop.Value, LowerizeFirst(prop.Key), prop.Key, $"new List<{prop.Value.Split(new char [] {'<', '>' }, StringSplitOptions.RemoveEmptyEntries).ElementAtOrDefault(1)}>()");
            }
            else
            {
                string keyAttribute = string.Empty;

                if (string.Format(PropIdFormat, elementName) == prop.Key)
                {
                    keyAttribute = "[Key]";
                }

                DefaultPropValues.TryGetValue(prop.Key, out string? defaultValue);

                sb.AppendFormat(propertyFormat, prop.Value, prop.Key, defaultValue != null ? $" = {defaultValue};" : required ? " = null!;" : string.Empty, string.Empty /* keyAttribute */);
            }

            messages.Add(msg);
        }

        // if (allProps.ContainsKey(elementName))
        // {
        //    allProps[elementName].AddRange(props);
        // }
        // else
        // {
        //    allProps.Add(elementName, props);
        // }
    }

    foreach (var keyValue in ret)
    {
        keyValue.Value.Append(classEnd);
    }

    return ret;
}

private bool IsPropertyIncluded(string root, CodeProperty prop, string? entitiesJson, List<string> namesForEntities)
{
    if (prop.Type.TypeKind == vsCMTypeRef.vsCMTypeRefString || prop.Type.AsFullName.Contains(".Nullable"))
    {
        return true;
    }

    var isCollection = prop.Type.AsString.Contains("ICollection");

    if (isCollection || prop.Type.CodeType.Kind != vsCMElement.vsCMElementStruct  && !prop.Type.AsFullName.Contains("String"))
    {//possible aggregate
        var typeName = GetTypeName(prop.Type.AsString, namesForEntities);

        if (isCollection)
        {
            var start = "ICollection<".Length;
            typeName = typeName.Substring(start, typeName.Length - start - 1);
        }

        if (entitiesJson == null)
        {
            return true;
        }

        //searching for aggregation
        var capture = Regex.Match(entitiesJson, @$"""Entity"": ""{root}"",(\r\n)?( )*""Aggs"": \[").Captures.Cast<Capture>().FirstOrDefault();

        if (capture == null || capture.Index == -1)
        {
            throw new Exception($"D3Error-100 :: Missing root aggregation declaration for the Entity {root} in the json or the Entity declaration in some 'Aggs: ['.");
        }

        var aggsStartIdx = capture.Index + capture.Length;

        if (aggsStartIdx == -1)
        {
            return false;
        }

        var aggsEndIdx = aggsStartIdx + 1;
        var brackets = 1;

        for (; aggsEndIdx < entitiesJson.Length; aggsEndIdx++)
        {
            if (entitiesJson[aggsEndIdx] == '[')
            {
                brackets++;
            }
            else if (entitiesJson[aggsEndIdx] == ']')
            {
                brackets--;
            }

            if (brackets == 0)
            {
                break;
            }
        }

        var aggsStr = entitiesJson.Substring(aggsStartIdx, aggsEndIdx - aggsStartIdx);

        return Regex.IsMatch(aggsStr, @$"\{{[\r\n ]*((""Entity"": ""{typeName.Replace("[", "\\[").Replace("]", "\\]")}"")|(""Prop"": ""{prop.Name}""))");
    }

    return true;
}

private string GetElementKind(CodeElement element)
{
    return element.Kind == vsCMElement.vsCMElementInterface ? "interface" : element.Kind == vsCMElement.vsCMElementEnum ? "enum" : element.Kind == vsCMElement.vsCMElementStruct ? "struct" : element.Kind == vsCMElement.vsCMElementClass ? "class" : null;
}

private string LowerizeFirst(string str)
{
    return string.Concat(char.ToLower(str[0]), str.Substring(1));
}

private static void AppendType(StringBuilder sb, string typeStr)
{
    sb.Append(typeStr);
}

public static string GetTypeName(string type, List<string> namesForEntities, bool isCodeClassTypeStr = true, bool identifierOnly = false)
{
    var typeNameSeparator = '<';
    var genericBracketLeft = '<';
    var genericBracketRight = '>';
    var typeNameGenericDistance = 1;

    if (!isCodeClassTypeStr)
    {
        typeNameSeparator = '`';
        genericBracketLeft = '[';
        genericBracketRight = ']';
        typeNameGenericDistance = 3;
    }

    var typeNameSb = new StringBuilder();

    var index = type.IndexOf(typeNameSeparator);

    var typeDef = index == -1 ? type : type.Substring(0, index);
    var typeDefParts = typeDef.Split('.');
    var nameSpaceSb = new StringBuilder();

    nameSpaceSb.Append(typeDefParts[0]);
    for (int i = 1; i < typeDefParts.Length - 1; i++)
    {
        nameSpaceSb.Append('.').Append(typeDefParts[i]);
    }

    var nameSpace = nameSpaceSb.ToString();
    if (extraNameSpaces.Contains(nameSpace))
    {
        typeNameSb.Append(nameSpace).Append('.');
    }

    AppendType(typeNameSb, typeDefParts.Last());

    if (identifierOnly)
    {
		if (index != -1)
        {
            var prefix = new StringBuilder();
            var genericsStr = type.Substring(index + typeNameGenericDistance);

            for (int i = 0; i < genericsStr.Length; i++)
            {
                var ch = genericsStr[i];
                if (!char.IsLetterOrDigit(ch) && ch != '.')
                {
                    break;
                }

                prefix.Append(ch);
            }

            if (char.IsLower(typeNameSb[0]))
            {
                typeNameSb[0] = char.ToUpper(typeNameSb[0]);
            }

            if (char.IsLower(prefix[0]))
            {
                prefix[0] = char.ToUpper(prefix[0]);
            }

            typeNameSb.Insert(0, prefix.ToString().Split('.').Last());
        }
    }
    else if (index != -1)
    {
        typeNameSb.Append("<");

        var genericsStr = type.Substring(index + typeNameGenericDistance);

        var generics = new List<string>();

        var context = new StringBuilder();
        var innerBrackets = 0;

        for (int i = 0; i < genericsStr.Length; i++)
        {
            var ch = genericsStr[i];
            if (ch == genericBracketLeft)
            {
                innerBrackets++;
                context.Append('<');
            }
            else if (ch == genericBracketRight)
            {
                if (innerBrackets == 0)
                {
                    break;
                }
                else
                {
                    innerBrackets--;
                    context.Append('>');
                }

            }
            else if (ch == ',' && innerBrackets == 0)
            {
                generics.Add(context.ToString());
                context.Clear();
            }
            else
            {
                context.Append(ch);
            }
        }

        if (context.Length > 0)
        {
            generics.Add(context.ToString());
        }

        AppendType(typeNameSb, GetTypeName(generics[0], namesForEntities));

        for (int i = 1; i < generics.Count; i++)
        {
            typeNameSb.Append(",");
            AppendType(typeNameSb, GetTypeName(generics[i], namesForEntities));
        }

        typeNameSb.Append(">");
    }

    return typeNameSb.ToString();
}
#>

<#+

private void SaveOutput(string outputFilePath, string text)
{
	using (var fs = new FileStream(outputFilePath, FileMode.OpenOrCreate))
	{
		fs.SetLength(0);
		var bytes = Encoding.UTF8.GetBytes(text);
		var awaiter = fs.WriteAsync(bytes, 0, bytes.Length);
		awaiter.Wait();
	}

	this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);

    genSuccess = true;
}
#>

<#+

// https://www.codeproject.com/Articles/39071/Declarative-Dependency-Property-Definition-with-T
public IEnumerable<CodeElement> CodeElementsInProjectItems(ProjectItems projectItems)
{
    foreach (ProjectItem projectItem in projectItems)
    {
        foreach(CodeElement el in CodeElementsInProjectItem(projectItem))
        {
            yield return el;
        }
    }
}
 
public IEnumerable<CodeElement> CodeElementsInProjectItem(ProjectItem projectItem)
{
    FileCodeModel fileCodeModel = projectItem.FileCodeModel;
 
    if (fileCodeModel != null)
    {
        foreach (CodeElement codeElement in fileCodeModel.CodeElements)
        {
            //WalkElements(codeElement, null);
            foreach(CodeElement el in CodeElementDescendantsAndSelf(codeElement))
            {
                yield return el;
            }
        }
    }
 
    if (projectItem.ProjectItems != null)
    {
        foreach (ProjectItem childItem in projectItem.ProjectItems)
        {
            foreach (CodeElement el in CodeElementsInProjectItem(childItem))
            {
                yield return el;
            }
        }
    }        
} 
 
public IEnumerable<CodeElement> CodeElementsDescendants(CodeElements codeElements)
{
    foreach(CodeElement element in codeElements)
    {
        foreach (CodeElement descendant in CodeElementDescendantsAndSelf(element))
        {
            yield return descendant;                
        }
    }
}
 
public IEnumerable<CodeElement> CodeElementDescendantsAndSelf(CodeElement codeElement)
{
    yield return codeElement;
 
    CodeElements codeElements;
 
    switch(codeElement.Kind)
    {        
 
        /* namespaces */
        case vsCMElement.vsCMElementNamespace:
        {
            CodeNamespace codeNamespace = (CodeNamespace)codeElement;                                        
            codeElements = codeNamespace.Members;
            foreach(CodeElement descendant in CodeElementsDescendants(codeElements))
            {
                yield return descendant;                
            }
            break;
        }
 
        /* Process classes */
        case vsCMElement.vsCMElementClass:
        {            
            CodeClass codeClass = (CodeClass)codeElement;            
            codeElements = codeClass.Members;
            foreach(CodeElement descendant in CodeElementsDescendants(codeElements))
            {                
                yield return descendant;                
            }            
            break;    
        }        
    }    
}

#>